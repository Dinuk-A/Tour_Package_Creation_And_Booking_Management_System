package lk.yathratravels.inquiry;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
//import java.util.Optional;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import jakarta.transaction.Transactional;
import lk.yathratravels.bookings.Booking;
import lk.yathratravels.bookings.BookingDao;
import lk.yathratravels.bookings.BookingService;
import lk.yathratravels.client.Client;
import lk.yathratravels.client.ClientDao;
import lk.yathratravels.client.ClientService;
import lk.yathratravels.privilege.Privilege;
import lk.yathratravels.privilege.PrivilegeServices;
import lk.yathratravels.tpkg.PriceModsDao;
import lk.yathratravels.tpkg.TourPkg;
import lk.yathratravels.user.UserDao;

@RestController
public class FollowupController {

    @Autowired
    private FollowupDao followupDao;

    @Autowired
    private PrivilegeServices privilegeService;

    @Autowired
    private UserDao userDao;

    @Autowired
    private InqDao inqDao;

    @Autowired
    private BookingService bookingService;

    @Autowired
    private ClientService clientService;

    @Autowired
    private ClientDao clientDao;

    @Autowired
    private BookingDao bookingDao;

    @Autowired
    private PriceModsDao priceModsDao;

    // get all followups
    @GetMapping(value = "/followup/all", produces = "application/json")
    public List<Followup> getAllFollowups() {

        Authentication auth = SecurityContextHolder.getContext().getAuthentication();

        Privilege privilegeLevelForLoggedUser = privilegeService.getPrivileges(auth.getName(), "INQUIRY");

        if (!privilegeLevelForLoggedUser.getPrvselect()) {
            return new ArrayList<Followup>();
        }

        return followupDao.findAll();

    }

    // get followups by inq id
    @GetMapping(value = "/followup/byinqid/{inqId}", produces = "application/JSON")
    public List<Followup> getFollowupsByInq(@PathVariable("inqId") int inquiryID) {
        return followupDao.getAllFollowupsByInqId(inquiryID);
    }

    // get last quoted followup by inq id(test only)
    // http://localhost:8081/followup/lastquoted?inqId=43
    @GetMapping(value = "/followup/lastquoted", produces = "application/JSON")
    public Followup getLastQuotedFollowup(@RequestParam Integer inqId) {
        return followupDao.getLastQuotedFollowup(inqId);
    }

    // get last sent tour package of last quoted followup by inq id(test only)
    // http://localhost:8081/followup/lastsenttpkg?inqId=40
    @GetMapping(value = "/followup/lastsenttpkg", produces = "application/JSON")
    public TourPkg getLastSentTourPackage(@RequestParam Integer inqId) {
        return followupDao.getLastSentTourPackage(inqId);
    }

    // save just the followup (no main inq data)
    // btn id == submitManualFollowup (small btn)
    @PostMapping(value = "/followuponly")
    @Transactional
    public String addNewFollowupOnly(@RequestBody Followup flwup) {

        Authentication auth = SecurityContextHolder.getContext().getAuthentication();

        try {

            flwup.setAddeddatetime(LocalDateTime.now());
            flwup.setAddeduserid(userDao.getUserByUsername(auth.getName()).getId());

            followupDao.save(flwup);

            // if this is the first time giving a followup, update main inq's stts to
            // working
            if (flwup.getInquiry_id().getInq_status().equals("New")
                    || flwup.getInquiry_id().getInq_status().equals("Assigned")) {
                flwup.getInquiry_id().setInq_status("Working");
            }

            inqDao.save(flwup.getInquiry_id());

            return "OK";

        } catch (Exception e) {
            return "Error Saving New Followup: " + e.getMessage();
        }

    }

    // save a followup also with inq detail updates
    @PostMapping(value = "/autogeneratedfollowupalsowithmaininquiry")
    @Transactional
    public String addNewFollowupWithInqUpdates(@RequestBody Followup flwup) {

        Authentication auth = SecurityContextHolder.getContext().getAuthentication();

        Privilege privilegeLevelForLoggedUser = privilegeService.getPrivileges(auth.getName(), "INQUIRY");

        if (!privilegeLevelForLoggedUser.getPrvinsert()) {
            return "Update Not Completed; You Dont Have Permission";
        }

        try {

            flwup.setAddeddatetime(LocalDateTime.now());
            flwup.setAddeduserid(userDao.getUserByUsername(auth.getName()).getId());

            followupDao.save(flwup);

            // if this is the first time giving a followup, change main inq stts to Working
            if (flwup.getInquiry_id().getInq_status().equals("New")
                    || flwup.getInquiry_id().getInq_status().equals("Assigned")) {
                flwup.getInquiry_id().setInq_status("Working");
            }

            // update the inquiry with the newly updated data by calls/emails
            inqDao.save(flwup.getInquiry_id());

            // if the main inquiry setted to "success" , must create Booking and Client
            // records
            if (flwup.getInquiry_id().getInq_status().equals("Confirmed")) {

                System.out.println("Booking created");

            }

            return "OK";

        } catch (Exception e) {
            return "Error Saving Followup Update: " + e.getMessage();
        }

    }

    // for main inq status == confirmed ones
    @PostMapping(value = "/createbookingbyinq")
    @Transactional
    public String createBookingByConfirmedInquiryOfFollowup(@RequestBody Followup flwup) {

        Authentication auth = SecurityContextHolder.getContext().getAuthentication();

        Privilege privilegeLevelForLoggedUser = privilegeService.getPrivileges(auth.getName(), "INQUIRY");

        if (!privilegeLevelForLoggedUser.getPrvinsert()) {
            return "Update Not Completed; You Dont Have Permission";
        }

        try {

            flwup.setAddeddatetime(LocalDateTime.now());
            flwup.setAddeduserid(userDao.getUserByUsername(auth.getName()).getId());

            followupDao.save(flwup);

            // update the inquiry too
            inqDao.save(flwup.getInquiry_id());

            if (flwup.getInquiry_id().getInq_status().equals("Confirmed")) {

                Inq mainInquiry = flwup.getInquiry_id();

                System.out.println("Creating a Client ");
                Optional<Client> clientOpt = clientDao.findByEmail(mainInquiry.getEmail());
                Client finalClient;

                if (clientOpt.isPresent()) {
                    finalClient = clientOpt.get();
                } else {

                    Client newClient = new Client();
                    clientService.assignNextClientCode(newClient);
                    newClient.setFullname(mainInquiry.getClientname());
                    newClient.setPassportornic(mainInquiry.getPassportnumornic());
                    newClient.setContactone(mainInquiry.getContactnum());
                    newClient.setContacttwo(mainInquiry.getContactnumtwo());
                    newClient.setEmail(mainInquiry.getEmail());
                    newClient.setCli_status("New");
                    newClient.setNationality_id(mainInquiry.getNationality_id());
                    newClient.setAddeddatetime(LocalDateTime.now());
                    newClient.setAddeduserid(userDao.getUserByUsername(auth.getName()).getId());

                    finalClient = clientDao.save(newClient);

                    System.out.println("New Client Created: ");
                }

                System.out.println("Creating a Booking ");

                Booking newBooking = new Booking();

                // code
                bookingService.assignNextBookingCode(newBooking);

                // get the last sent tour package for this inquiry (needed for start,end dates +
                // more)
                TourPkg lastSentPkg = followupDao.getLastSentTourPackage(mainInquiry.getId());

                // newBooking.setStartdate(mainInquiry.getInq_apprx_start_date());
                newBooking.setStartdate(lastSentPkg.getTourstartdate());
                newBooking.setEnddate(lastSentPkg.getTourenddate());

                // initial prices
                newBooking.setFinal_price(lastSentPkg.getPkgfinalprice());
                newBooking.setTotal_paid(BigDecimal.valueOf(0.00));

                // due balance is also equal to initial total price when adding as a new
                newBooking.setDue_balance(lastSentPkg.getPkgfinalprice());

                // calculate advancement based on price config's profit
                BigDecimal profitMargin = priceModsDao.getCompanyProfitMargin();
                if (profitMargin == null) {
                    profitMargin = BigDecimal.ZERO;
                }
                BigDecimal advanceAmount = lastSentPkg.getPkgfinalprice().multiply(profitMargin).setScale(2,
                        RoundingMode.HALF_UP);
                newBooking.setAdvancement_amount(advanceAmount);

                // statuses
                newBooking.setBooking_status("New");
                newBooking.setPayment_status("Payment_Pending");
                newBooking.setIs_full_payment_complete(false);

                // client
                newBooking.setClient(finalClient);

                // tpkg (fetched above)
                newBooking.setTpkg(lastSentPkg);

                newBooking.setAddeddatetime(LocalDateTime.now());
                newBooking.setAddeduserid(userDao.getUserByUsername(auth.getName()).getId());

                bookingDao.save(newBooking);

            }

            return "OK";

        } catch (Exception e) {
            return "Error Saving Followup Update: " + e.getMessage();
        }

    }

    // if (lastSentPkg != null) {
    // newBooking.setTpkg(lastSentPkg);
    // } else {
    // System.out.println("No quoted tour package found for inquiry ID: " +
    // mainInquiry.getId());
    // }

    // newBooking.setFinal_price(lastSentPkg != null ?
    // lastSentPkg.getPkgfinalprice() : 0.0);
}
